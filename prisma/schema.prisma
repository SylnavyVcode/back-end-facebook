// Définition de la base de données SQLite
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL") // Assurez-vous que la variable d'environnement DATABASE_URL est définie
}

// Génération des clients Prisma
generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma

// Utilisateur
model User {
  id             String         @id @default(cuid()) // ID unique pour chaque utilisateur
  email          String         @unique
  firstname      String
  lastname       String
  telephone      String
  genre          String
  anniversaire   String
  profilePic     String?
  profilCoverPic String?
  posts          Post[]
  comments       Comment[]
  likes          Like[]
  Conversations  Conversation[]
  Messages       Message[]

  donationsGiven    Donation[] @relation("givingUser")
  donationsReceived Donation[] @relation("receivingUser")
}

model Conversation {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  users     User[]
  messages  Message[]
}

// Account
model Account {
  id                 String   @id @default(cuid())
  password           String
  isResetingPassword Boolean?
  resetPasswordToken String?  @unique
  user_id            String   @unique
  type_account       String
}

// Publication
model Post {
  id        String    @id @default(cuid())
  content   String?
  image     Image[]
  video     Video[]
  author_id String
  author    User      @relation(fields: [author_id], references: [id])
  comments  Comment[]
  likes     Like[]
  group_id  String?
  privacy   Privacy   @default(PRIVATE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Image {
  id     Int    @id @default(autoincrement())
  url    String
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Video {
  id     Int    @id @default(autoincrement())
  url    String
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

// Commentaire
model Comment {
  id        String @id @default(cuid())
  content   String
  image     String
  video     String
  post_id   String
  post      Post   @relation(fields: [post_id], references: [id])
  author_id String
  author    User   @relation(fields: [author_id], references: [id])
  createdAt DateTime @default(now())
}

// Commentaire utilisateurs
model CommentUsers {
  id      String @id @default(cuid())
  user_id String
  post_id String
}

// Groupe
model Groupe {
  id          String  @id @default(cuid())
  name        String
  description String?
  privacy     Privacy @default(PRIVATE)
}

// Groupe Ajout
model GroupAdd {
  id       String @id @default(cuid())
  user_id  String
  post_id  String
  group_id String
}

// Message
model Message {
  id           String       @id @default(cuid())
  content      String
  createdAt    DateTime     @default(now())
  sender       User         @relation(fields: [sender_id], references: [id])
  sender_id    String
  conversation Conversation @relation(fields: [chat_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chat_id      String

  @@index([chat_id])
  @@index([sender_id])
}

model Donation {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  stripeProductId String
  stripePriceId   String   @unique

  givingUser   User   @relation("givingUser", fields: [givingUserId], references: [id])
  givingUserId String

  receivingUser   User   @relation("receivingUser", fields: [receivingUserId], references: [id])
  receivingUserId String
  // Amount is in cents
  amount          Int?

  @@index([givingUserId])
  @@index([receivingUserId])
}

// Notification
model Notification {
  id        String   @id @default(cuid())
  type      String
  content   String
  user_id   String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
}

// Like
model Like {
  id         String  @id @default(cuid())
  user_id    String
  post_id    String?
  comment_id String?
  user       User    @relation(fields: [user_id], references: [id])
  post       Post?   @relation(fields: [post_id], references: [id])
}

enum Privacy {
  PUBLIC
  PRIVATE
  FRIENDS
}
